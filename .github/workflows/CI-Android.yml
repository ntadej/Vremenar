name: Android CI
on:
  workflow_dispatch:
  push:
    branches:
      - "**"
    tags:
      - "**"
    paths-ignore:
      - ".gitignore"
      - "README.md"
      # ignore CI for other platforms
      - ".github/actions/**"
      - ".github/workflows/CI-iOS-Qt5.yml"
      - ".github/workflows/CI-iOS.yml"
      - ".github/workflows/CI-Linux.yml"
      - ".github/workflows/CI-macOS.yml"
      - ".github/workflows/CI-Windows-Qt5.yml"
      - ".github/workflows/CI-Windows.yml"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ github.ref != 'refs/heads/main' }}

env:
  QT_VERSION: 6.4.1
  MAPLIBRE_VERSION: 2.1.0

jobs:
  build:
    name: Build Vremenar (Android)
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        type: [play, amazon, amazon_firetv, amazon_fire32, amazon_fire64]

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          path: source
          submodules: recursive
          fetch-depth: 0

      - name: Download Qt (desktop)
        id: qt-desktop
        uses: jurplel/install-qt-action@v3
        with:
          aqtversion: ==3.0.*
          version: ${{ env.QT_VERSION }}
          modules: qtpositioning
          set-env: false

      - name: Download Qt (Android, armv7)
        id: qt-android-armv7
        if: matrix.type != 'amazon_fire64'
        uses: jurplel/install-qt-action@v3
        with:
          aqtversion: ==3.0.*
          version: ${{ env.QT_VERSION }}
          target: android
          arch: android_armv7
          modules: qtpositioning

      - name: Download Qt (Android, arm64_v8a)
        id: qt-android-arm64_v8a
        if: matrix.type != 'amazon_fire32' && matrix.type != 'amazon_firetv'
        uses: jurplel/install-qt-action@v3
        with:
          aqtversion: ==3.0.*
          version: ${{ env.QT_VERSION }}
          target: android
          arch: android_arm64_v8a
          modules: qtpositioning

      - name: Download Qt (Android, x86)
        id: qt-android-x86
        if: matrix.type != 'amazon_fire32' && matrix.type != 'amazon_fire64' && matrix.type != 'amazon_firetv'
        uses: jurplel/install-qt-action@v3
        with:
          aqtversion: ==3.0.*
          version: ${{ env.QT_VERSION }}
          target: android
          arch: android_x86
          modules: qtpositioning

      - name: Download Qt (Android, x86_64)
        id: qt-android-x86_64
        if: matrix.type != 'amazon_fire32' && matrix.type != 'amazon_fire64' && matrix.type != 'amazon_firetv'
        uses: jurplel/install-qt-action@v3
        with:
          aqtversion: ==3.0.*
          version: ${{ env.QT_VERSION }}
          target: android
          arch: android_x86_64
          modules: qtpositioning

      - name: Fix Qt release
        run: |
          pushd .. > /dev/null || exit
          if [ -d "Qt/$QT_VERSION/android_armv7/bin" ]; then
            sudo apt-get install -y dos2unix
            chmod +x "Qt/$QT_VERSION/android_armv7/bin/qt-cmake"
            sed -i 's/C:\/Qt\/Qt-6.4.1/\/usr\/local\/Qt-6.4.1/g' "Qt/$QT_VERSION/android_armv7/lib/cmake/Qt6BuildInternals/QtBuildInternalsExtra.cmake"
            dos2unix Qt/$QT_VERSION/android_armv7/lib/cmake/Qt6Qml/Qt6QmlMacros.cmake
          fi
          popd > /dev/null || exit

      - name: Download MapLibre
        run: |
          wget https://github.com/ntadej/qt-geoservices-maplibre-gl/releases/download/v${MAPLIBRE_VERSION}/qt-geoservices-maplibre-gl_v${MAPLIBRE_VERSION}_Qt${QT_VERSION}_Android.tar.bz2
          tar xvf qt-geoservices-maplibre-gl_v${MAPLIBRE_VERSION}_Qt${QT_VERSION}_Android.tar.bz2 -C ..

      - name: Setup Fastlane
        uses: ruby/setup-ruby@v1
        with:
          bundler-cache: true
          working-directory: source

      - name: Set up OpenJDK 11
        uses: actions/setup-java@v3
        with:
          distribution: "adopt"
          java-version: "11"

      - name: Setup ninja
        uses: seanmiddleditch/gha-setup-ninja@v3

      - name: Set up ccache
        uses: hendrikmuhs/ccache-action@v1
        with:
          key: Android_${{ matrix.type }}

      - name: Configure & prepare
        working-directory: source
        env:
          CONFIG_CMAKE: ${{ secrets.CONFIG_CMAKE }}
          GOOGLE_DEPLOYMENT_KEY: ${{ secrets.GOOGLE_DEPLOYMENT_KEY }}
          GOOGLE_SERVICES_ANDROID: ${{ secrets.GOOGLE_SERVICES_ANDROID }}
        run: |
          echo $CONFIG_CMAKE | base64 --decode > Config.cmake
          echo $GOOGLE_DEPLOYMENT_KEY | base64 --decode > google-play_api.json
          echo $GOOGLE_SERVICES_ANDROID | base64 --decode > resources/Android/output/google-services.json

          pushd ../.. > /dev/null || exit
          if [ -f "Qt/$QT_VERSION/android_armv7/lib/cmake/Qt6Qml/Qt6QmlMacros.cmake" ]; then
            patch Qt/$QT_VERSION/android_armv7/lib/cmake/Qt6Qml/Qt6QmlMacros.cmake Vremenar/source/3rdparty/qml.patch
          fi
          if [ -f "Qt/$QT_VERSION/android_arm64_v8a/lib/cmake/Qt6Qml/Qt6QmlMacros.cmake" ]; then
            patch Qt/$QT_VERSION/android_arm64_v8a/lib/cmake/Qt6Qml/Qt6QmlMacros.cmake Vremenar/source/3rdparty/qml.patch
          fi
          if [ -f "Qt/$QT_VERSION/android_x86_64/lib/cmake/Qt6Qml/Qt6QmlMacros.cmake" ]; then
            patch Qt/$QT_VERSION/android_x86_64/lib/cmake/Qt6Qml/Qt6QmlMacros.cmake Vremenar/source/3rdparty/qml.patch
          fi
          if [ -f "Qt/$QT_VERSION/android_x86/lib/cmake/Qt6Qml/Qt6QmlMacros.cmake" ]; then
            patch Qt/$QT_VERSION/android_x86/lib/cmake/Qt6Qml/Qt6QmlMacros.cmake Vremenar/source/3rdparty/qml.patch
          fi
          popd > /dev/null || exit

      - name: Build
        working-directory: source
        env:
          BUILD_TYPE: ${{ matrix.type }}
        run: |
          export QT_HOST_PATH="$(readlink -f "$Qt6_DIR/../gcc_64")"

          bundle exec fastlane android ${BUILD_TYPE}

      - name: Sign app
        id: sign_app
        uses: ilharp/sign-android-release@v1
        with:
          releaseDir: source/fastlane/build/android_${{ matrix.type }}
          signingKey: ${{ secrets.ANDROID_SIGNING_KEY }}
          keyAlias: ${{ secrets.ANDROID_KEY_ALIAS }}
          keyStorePassword: ${{ secrets.ANDROID_KEYSTORE_PASSWORD }}
          buildToolsVersion: 33.0.0

      - name: Deploy
        working-directory: source
        if: github.ref_name == 'deploy' && matrix.type == 'play'
        run: |
          bundle exec fastlane android play_deploy
