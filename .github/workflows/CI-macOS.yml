name: macOS CI
on:
  workflow_dispatch:
  push:
    branches:
      - "**"
    tags:
      - "**"
    paths-ignore:
      - ".gitignore"
      - "README.md"
      # ignore CI for other platforms
      - ".github/actions/**"
      - ".github/workflows/CI-Android.yml"
      - ".github/workflows/CI-iOS-Qt5.yml"
      - ".github/workflows/CI-iOS.yml"
      - ".github/workflows/CI-Linux.yml"
      - ".github/workflows/CI-Windows-Qt5.yml"
      - ".github/workflows/CI-Windows.yml"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ github.ref != 'refs/heads/main' }}

env:
  QT_VERSION: 6.4.2
  MAPLIBRE_VERSION: 2.1.0

jobs:
  build:
    name: Build Vremenar (macOS 12 x64)
    runs-on: macos-12
    strategy:
      matrix:
        type: [developer_id, app_store]

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          path: source
          submodules: recursive
          fetch-depth: 0

      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: latest-stable

      - name: Download Static Qt
        if: matrix.type == 'app_store'
        run: |
          cd ..
          wget https://github.com/ntadej/qt-build/releases/download/v${QT_VERSION}.0/Qt_macOS_static.tar.bz2
          tar xvf Qt_macOS_static.tar.bz2
          echo "Qt6_DIR=$PWD/Qt/$QT_VERSION/macos_static" >> $GITHUB_ENV
          echo "$PWD/Qt/$QT_VERSION/macos_static/bin" >> $GITHUB_PATH
          cd $GITHUB_WORKSPACE

      - name: Download Qt
        if: matrix.type == 'developer_id'
        uses: jurplel/install-qt-action@v3
        with:
          aqtversion: ==3.0.*
          version: ${{ env.QT_VERSION }}
          target: desktop
          modules: qtpositioning qtshadertools qt5compat

      - name: Download Qt patches
        if: matrix.type == 'developer_id'
        run: |
          wget https://github.com/ntadej/qcocoa/releases/download/v${QT_VERSION}.0/qcocoa_v${QT_VERSION}.0.tar.bz2
          tar xvf qcocoa_v${QT_VERSION}.0.tar.bz2 -C ..

      - name: Download MapLibre
        if: matrix.type == 'developer_id'
        run: |
          wget https://github.com/ntadej/qt-geoservices-maplibre-gl/releases/download/v${MAPLIBRE_VERSION}/qt-geoservices-maplibre-gl_v${MAPLIBRE_VERSION}_Qt${QT_VERSION}_macOS.tar.bz2
          tar xvf qt-geoservices-maplibre-gl_v${MAPLIBRE_VERSION}_Qt${QT_VERSION}_macOS.tar.bz2 -C ..

      - name: Setup Fastlane
        uses: ruby/setup-ruby@v1
        with:
          bundler-cache: true
          working-directory: source

      - name: Setup deploy key
        uses: webfactory/ssh-agent@v0.5.4
        with:
          ssh-private-key: ${{ secrets.MATCH_GIT_PRIVATE_KEY }}

      - name: Setup dependencies
        run: |
          npm install --global create-dmg
          brew install graphicsmagick imagemagick

      - name: Setup ninja
        uses: seanmiddleditch/gha-setup-ninja@v3

      - name: Set up ccache
        uses: hendrikmuhs/ccache-action@v1
        with:
          key: macOS_${{ matrix.type }}

      - name: Configure & prepare
        working-directory: source
        env:
          APPLE_DEPLOYMENT_KEY: ${{ secrets.APPLE_DEPLOYMENT_KEY }}
          CONFIG_CMAKE: ${{ secrets.CONFIG_CMAKE }}
          GOOGLE_SERVICES_APPLE: ${{ secrets.GOOGLE_SERVICES_APPLE }}
        run: |
          echo $APPLE_DEPLOYMENT_KEY | base64 --decode > appstore_api.json
          echo $CONFIG_CMAKE | base64 --decode > Config.cmake
          echo $GOOGLE_SERVICES_APPLE | base64 --decode > GoogleService-Info.plist

          pushd ../.. > /dev/null || exit
          if [[ -f "Qt/$QT_VERSION/macos/lib/cmake/Qt6Qml/Qt6QmlMacros.cmake" ]]; then
            patch Qt/$QT_VERSION/macos/lib/cmake/Qt6Qml/Qt6QmlMacros.cmake Vremenar/source/3rdparty/qml.patch
          fi
          popd > /dev/null || exit

      - name: Build
        working-directory: source
        env:
          BUILD_TYPE: ${{ matrix.type }}
          MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}
        run: |
          export FL_RUN_CMAKE_XCODE_PATH="${MD_APPLE_SDK_ROOT}"
          if [ "$GITHUB_REF_NAME" = "deploy" ]; then
            export DEPLOY=1
          fi

          bundle exec fastlane mac ${BUILD_TYPE}

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: macOS-package_${{ matrix.type }}
          path: source/fastlane/build/macos*/Vremenar.*
