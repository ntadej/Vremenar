name: Continuous Integration
on: [push, workflow_dispatch]

env:
  QT_VERSION: 5.15.2

jobs:
  build:
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      matrix:
        config:
          - name: "Linux Ubuntu 18.04 x64"
            artifact: "Vremenar-x86_64.AppImage"
            os: ubuntu-18.04
            platform: linux
            target: desktop
          - name: "Android Universal"
            artifact: "Vremenar_Android_universal.apk"
            os: ubuntu-latest
            platform: android
            target: android
          - name: "macOS Latest x64"
            artifact: "Vremenar_macOS.dmg"
            os: macos-latest
            platform: macos
            target: desktop
          - name: "iOS Latest"
            artifact: "Vremenar_iOS.ipa"
            os: macos-latest
            platform: ios
            target: ios

    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Checkout submodules
        shell: bash
        run: |
          auth_header="$(git config --local --get http.https://github.com/.extraheader)"
          git submodule sync --recursive
          git -c "http.extraheader=$auth_header" -c protocol.version=2 submodule update --init --force --recursive --depth=1

      - name: Setup Xcode
        if: matrix.config.platform == 'ios' || matrix.config.platform == 'macos'
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: latest-stable

      - name: Download Qt
        uses: jurplel/install-qt-action@v2
        with:
          version: ${{ env.QT_VERSION }}
          target: ${{ matrix.config.target }}

      - name: Set up OpenJDK 11
        if: matrix.config.platform == 'android'
        uses: actions/setup-java@v2-preview
        with:
          distribution: 'adopt'
          java-version: '11'

      - name: Configure & prepare
        env:
          MAPS_ENDPOINT: ${{ secrets.MAPS_ENDPOINT }}
          API_ENDPOINT: ${{ secrets.API_ENDPOINT }}
          APPCAST_ENDPOINT: ${{ secrets.APPCAST_ENDPOINT }}
          COUNTLY_APPKEY: ${{ secrets.COUNTLY_APPKEY }}
          COUNTLY_APPKEY_DEV: ${{ secrets.COUNTLY_APPKEY_DEV }}
          COUNTLY_ENDPOINT: ${{ secrets.COUNTLY_ENDPOINT }}
          COUNTLY_SALT: ${{ secrets.COUNTLY_SALT }}
          COUNTLY_SALT_DEV: ${{ secrets.COUNTLY_SALT_DEV }}
        run: |
          cat <<EOT > config.pri
          MAPS_ENDPOINT="${MAPS_ENDPOINT}"
          API_ENDPOINT="${API_ENDPOINT}"
          APPCAST_ENDPOINT="${APPCAST_ENDPOINT}"
          COUNTLY_APPKEY="${COUNTLY_APPKEY}"
          COUNTLY_ENDPOINT="${COUNTLY_ENDPOINT}"
          COUNTLY_SALT="${COUNTLY_SALT}"
          EOT
          cd ..
          mkdir build

      - name: Setup dependencies
        env:
          PLATFORM: ${{ matrix.config.platform }}
        run: ./scripts/prepare_dependencies.sh ${PLATFORM}

      - name: Build (macOS)
        if: matrix.config.platform == 'macos'
        working-directory: ../build
        env:
          ARTIFACT_NAME: ${{ matrix.config.artifact }}
          VREMENAR_PATH: ../Vremenar
        run: |
          qmake $VREMENAR_PATH/Vremenar.pro -spec macx-clang CONFIG+=release CONFIG+=x86_64 CONFIG+=qtquickcompiler
          make -j2
          $VREMENAR_PATH/scripts/build_dmg.sh Vremenar.app "$VREMENAR_PATH"
          mv "Vremenar $(cat "$VREMENAR_PATH/config/VERSION").dmg" $ARTIFACT_NAME

      - name: Build (iOS)
        if: matrix.config.platform == 'ios'
        working-directory: ../build
        env:
          ARTIFACT_NAME: ${{ matrix.config.artifact }}
          VREMENAR_PATH: ../Vremenar
        run: |
          qmake $VREMENAR_PATH/Vremenar.pro -spec macx-ios-clang CONFIG+=release CONFIG+=iphoneos CONFIG+=device CONFIG+=qtquickcompiler
          xcodebuild archive -scheme Vremenar -configuration Release -sdk iphoneos CODE_SIGN_IDENTITY="" CODE_SIGNING_REQUIRED=NO -archivePath Vremenar.xcarchive
          mv Vremenar.xcarchive/Products/Applications Payload
          ldid -S Payload/Vremenar.app/Vremenar
          zip -r Vremenar.zip Payload
          mv Vremenar.zip $ARTIFACT_NAME

      - name: Build (Linux)
        if: matrix.config.platform == 'linux'
        working-directory: ../build
        env:
          ARTIFACT_NAME: ${{ matrix.config.artifact }}
          VREMENAR_PATH: ../Vremenar
        run: |
          # Install gcc 9
          sudo add-apt-repository ppa:ubuntu-toolchain-r/test
          sudo apt update
          sudo apt install libgl-dev \
            libxkbcommon-x11-dev \
            libxcb-icccm4-dev libxcb-image0-dev libxcb-keysyms1-dev \
            libxcb-randr0-dev libxcb-render0-dev libxcb-render-util0-dev libxcb-shape0-dev libxcb-shm0-dev \
            libxcb-sync-dev libxcb-xinerama0-dev libxcb-xkb-dev \
            gcc-9 g++-9
          sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-7 700 --slave /usr/bin/g++ g++ /usr/bin/g++-7
          sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-9 900 --slave /usr/bin/g++ g++ /usr/bin/g++-9
          gcc --version
          # Build
          qmake $VREMENAR_PATH/Vremenar.pro -spec linux-g++ CONFIG+=release CONFIG+=qtquickcompiler
          make -j2
          make INSTALL_ROOT=appdir -j2 install ; find appdir/
          wget -c -nv "https://github.com/probonopd/linuxdeployqt/releases/download/continuous/linuxdeployqt-continuous-x86_64.AppImage"
          chmod a+x linuxdeployqt-continuous-x86_64.AppImage
          ./linuxdeployqt-continuous-x86_64.AppImage appdir/usr/share/applications/vremenar.desktop \
            -qmldir=$VREMENAR_PATH/src/qml/ \
            -extra-plugins=geoservices/libqtgeoservices_mapboxgl.so,geoservices/libqtgeoservices_osm.so,sqldrivers/libqsqlite.so \
            -appimage

      - name: Build (Android)
        if: matrix.config.platform == 'android'
        working-directory: ../build
        env:
          ARTIFACT_NAME: ${{ matrix.config.artifact }}
          VREMENAR_PATH: ../Vremenar
          ANDROID_NDK_PLATFORM: android-21
        run: |
          export ANDROID_NDK_ROOT=$ANDROID_SDK_ROOT/ndk-bundle
          qmake $VREMENAR_PATH/Vremenar.pro -spec android-clang CONFIG+=release CONFIG+=qtquickcompiler ANDROID_ABIS="armeabi-v7a arm64-v8a x86 x86_64"
          make -j2
          make apk
          mv android-build/build/outputs/apk/debug/android-build-debug.apk $ARTIFACT_NAME

      - name: Upload artifacts
        uses: actions/upload-artifact@v1
        with:
          name: ${{ matrix.config.artifact }}
          path: ../build/${{ matrix.config.artifact }}
